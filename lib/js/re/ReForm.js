// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Caml_obj    = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

function Create(Config) {
  var validateFieldChange = function (field, values, value, schema) {
    var fieldValidation = List.hd(List.filter((function (param) {
                  return +(Caml_obj.caml_compare(param[0], field) === 0);
                }))(schema));
    var match = fieldValidation[1];
    if (typeof match === "number") {
      if (match !== 0) {
        return /* None */0;
      } else {
        var match$1 = +(value.length < 1);
        if (match$1 !== 0) {
          return /* Some */["Field is required"];
        } else {
          return /* None */0;
        }
      }
    } else {
      return Curry._1(match[0], values);
    }
  };
  var component = ReasonReact.reducerComponent("ReForm");
  var make = function (onSubmit, validate, initialState, schema, children) {
    var newrecord = component.slice();
    newrecord[/* render */9] = (function (self) {
        var handleChange = function (field) {
          return Curry._1(self[/* reduce */1], (function (value) {
                        return /* HandleChange */Block.__(3, [/* tuple */[
                                    field,
                                    value
                                  ]]);
                      }));
        };
        var handleValidation = Curry._1(self[/* reduce */1], (function (error) {
                return /* HandleError */Block.__(2, [error]);
              }));
        var handleFormSubmit = Curry._1(self[/* reduce */1], (function () {
                return /* HandleSubmit */0;
              }));
        var handleSubmit = function () {
          var validationError = Curry._1(validate, self[/* state */2][/* values */0]);
          Curry._1(handleValidation, validationError);
          var match = +(validationError === /* None */0);
          if (match !== 0) {
            return Curry._1(handleFormSubmit, /* () */0);
          } else {
            return /* () */0;
          }
        };
        return Curry._4(children, self[/* state */2], handleChange, handleSubmit, handleValidation);
      });
    newrecord[/* initialState */10] = (function () {
        return /* record */[
                /* values */initialState,
                /* isSubmitting : false */0,
                /* errors : [] */0,
                /* error : None */0
              ];
      });
    newrecord[/* reducer */12] = (function (action, state) {
        if (typeof action === "number") {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* values */state[/* values */0],
                      /* isSubmitting : true */1,
                      /* errors */state[/* errors */2],
                      /* error */state[/* error */3]
                    ],
                    (function (self) {
                        return Curry._3(onSubmit, state[/* values */0], Curry._1(self[/* reduce */1], (function (isSubmitting) {
                                          return /* HandleSubmitting */Block.__(0, [isSubmitting]);
                                        })), Curry._1(self[/* reduce */1], (function (error) {
                                          return /* HandleError */Block.__(2, [error]);
                                        })));
                      })
                  ]);
        } else {
          switch (action.tag | 0) {
            case 0 : 
                return /* Update */Block.__(0, [/* record */[
                            /* values */state[/* values */0],
                            /* isSubmitting */action[0],
                            /* errors */state[/* errors */2],
                            /* error */state[/* error */3]
                          ]]);
            case 1 : 
                var match = action[0];
                var field = match[0];
                return /* Update */Block.__(0, [/* record */[
                            /* values */state[/* values */0],
                            /* isSubmitting */state[/* isSubmitting */1],
                            /* errors */List.append(/* :: */[
                                  /* tuple */[
                                    field,
                                    validateFieldChange(field, state[/* values */0], match[1], schema)
                                  ],
                                  /* [] */0
                                ], List.filter((function (param) {
                                          return +(Caml_obj.caml_compare(param[0], field) !== 0);
                                        }))(state[/* errors */2])),
                            /* error */state[/* error */3]
                          ]]);
            case 2 : 
                return /* Update */Block.__(0, [/* record */[
                            /* values */state[/* values */0],
                            /* isSubmitting : false */0,
                            /* errors */state[/* errors */2],
                            /* error */action[0]
                          ]]);
            case 3 : 
                var match$1 = action[0];
                var value = match$1[1];
                var field$1 = match$1[0];
                return /* UpdateWithSideEffects */Block.__(3, [
                          /* record */[
                            /* values */Curry._2(Config[/* handleChange */0], /* tuple */[
                                  field$1,
                                  value
                                ], state[/* values */0]),
                            /* isSubmitting */state[/* isSubmitting */1],
                            /* errors */state[/* errors */2],
                            /* error */state[/* error */3]
                          ],
                          (function (self) {
                              return Curry._2(self[/* reduce */1], (function () {
                                            return /* HandleFieldValidation */Block.__(1, [/* tuple */[
                                                        field$1,
                                                        value
                                                      ]]);
                                          }), /* () */0);
                            })
                        ]);
            
          }
        }
      });
    return newrecord;
  };
  return /* module */[
          /* validateFieldChange */validateFieldChange,
          /* component */component,
          /* make */make
        ];
}

exports.Create = Create;
/* ReasonReact Not a pure module */
