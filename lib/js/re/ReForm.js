// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Caml_obj                = require("bs-platform/lib/js/caml_obj.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var ReasonReact             = require("reason-react/lib/js/src/ReasonReact.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Create(Config) {
  var component = ReasonReact.reducerComponent("ReForm");
  var handleSchemaValidation = function (schema, setError, values, param) {
    var fieldValue = param[1];
    var fieldName = param[0];
    var exit = 0;
    var val;
    try {
      val = List.find((function (param) {
              return +(Caml_obj.caml_compare(param[0], fieldName) === 0);
            }), schema);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return Curry._1(setError, /* None */0);
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      List.iter((function (validationType) {
              if (typeof validationType === "number") {
                if (validationType !== 0) {
                  if ((/@/).test(fieldValue)) {
                    return /* () */0;
                  } else {
                    return Curry._1(setError, /* Some */["Invalid email"]);
                  }
                } else if (fieldValue === "") {
                  return Curry._1(setError, /* Some */["Fill up all fields"]);
                } else {
                  return /* () */0;
                }
              } else {
                Curry._1(setError, Curry._1(validationType[0], values));
                return /* () */0;
              }
            }), val[1]);
      return /* () */0;
    }
    
  };
  var make = function (onSubmit, validate, schema, children) {
    var newrecord = component.slice();
    newrecord[/* render */9] = (function (self) {
        var handleChange = function (field) {
          return Curry._1(self[/* reduce */1], (function (value) {
                        return /* HandleChange */Block.__(2, [/* tuple */[
                                    field,
                                    value
                                  ]]);
                      }));
        };
        var handleValidation = Curry._1(self[/* reduce */1], (function (error) {
                return /* HandleError */Block.__(1, [error]);
              }));
        var handleFormSubmit = Curry._1(self[/* reduce */1], (function () {
                return /* HandleSubmit */0;
              }));
        var handleSubmit = function () {
          var validationError = Curry._1(validate, self[/* state */2][/* values */0]);
          Curry._1(handleValidation, validationError);
          var match = +(validationError === /* None */0);
          if (match !== 0) {
            return Curry._1(handleFormSubmit, /* () */0);
          } else {
            return /* () */0;
          }
        };
        return Curry._4(Caml_array.caml_array_get(children, 0), self[/* state */2], handleChange, handleSubmit, handleValidation);
      });
    newrecord[/* initialState */10] = (function () {
        return /* record */[
                /* values */Config[/* initialState */1],
                /* isSubmitting : false */0,
                /* error : None */0
              ];
      });
    newrecord[/* reducer */12] = (function (action, state) {
        if (typeof action === "number") {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* values */state[/* values */0],
                      /* isSubmitting : true */1,
                      /* error */state[/* error */2]
                    ],
                    (function (self) {
                        return Curry._3(onSubmit, state[/* values */0], Curry._1(self[/* reduce */1], (function (isSubmitting) {
                                          return /* HandleSubmitting */Block.__(0, [isSubmitting]);
                                        })), Curry._1(self[/* reduce */1], (function (error) {
                                          return /* HandleError */Block.__(1, [error]);
                                        })));
                      })
                  ]);
        } else {
          switch (action.tag | 0) {
            case 0 : 
                return /* Update */Block.__(0, [/* record */[
                            /* values */state[/* values */0],
                            /* isSubmitting */action[0],
                            /* error */state[/* error */2]
                          ]]);
            case 1 : 
                return /* Update */Block.__(0, [/* record */[
                            /* values */state[/* values */0],
                            /* isSubmitting : false */0,
                            /* error */action[0]
                          ]]);
            case 2 : 
                var match = action[0];
                var value = match[1];
                var field = match[0];
                return /* UpdateWithSideEffects */Block.__(3, [
                          /* record */[
                            /* values */Curry._2(Config[/* handleChange */0], /* tuple */[
                                  field,
                                  value
                                ], state[/* values */0]),
                            /* isSubmitting */state[/* isSubmitting */1],
                            /* error */state[/* error */2]
                          ],
                          (function (self) {
                              return handleSchemaValidation(schema, Curry._1(self[/* reduce */1], (function (error) {
                                                return /* HandleError */Block.__(1, [error]);
                                              })), state[/* values */0], /* tuple */[
                                          field,
                                          value
                                        ]);
                            })
                        ]);
            
          }
        }
      });
    return newrecord;
  };
  return /* module */[
          /* component */component,
          /* handleSchemaValidation */handleSchemaValidation,
          /* make */make
        ];
}

exports.Create = Create;
/* ReasonReact Not a pure module */
